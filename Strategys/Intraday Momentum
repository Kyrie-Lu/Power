#根据动量理论，即前日收盘前半小时数据与今日开盘一小时数据预测下午收盘价。实盘时根据预测情况，于10点半对股票进行买入，并于次日开盘进行卖出操作。
#该策略指数为hs300股指，将08年到15年底的数据设置为训练集，16年到18年设置为测试集，模型使用为朴素贝叶斯，最终得到大约3倍的收益率
from sklearn.externals import joblib
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as md

from datetime import time

#读取数据与缺失数据处理
data = pd.read_csv('data20190102.csv')
# data['trade_time'] = pd.to_datetime(data['trade_time'])
# data.set_index(data['trade_time'],inplace=True)
# data.index = pd.to_datetime(data.index)
data.index = pd.DatetimeIndex(data['trade_time'])
# print(data.at_time(time(10,0)))
# print(data.between_time(time(10,0),time(13,31)))
# print(data.info())
data['signals'] = 1
data = data.between_time(time(9,59),time(15,1))
# del data['trade_time']
# data = data.resample('D').sum() #2008.11.28\2009.10.30\2010.9.30
data.index = data.index.strftime('%Y%m%d')
# print(data.info())
data.drop(['20081128','20091030','20100930'],inplace= True)
data.index = pd.DatetimeIndex(data['trade_time'])
del data['trade_time']
# data = data.resample('D').sum()
# data.to_csv('data.csv')
# print(data)
data = data.loc[:,['open','high','low','close']]

#数据预处理与分类
def DataHandle(data):
    data.reset_index(inplace=True)
    data_train = data.iloc[7:10,]
    for i in range(15,len(data),8):
        data_transition = data.iloc[i:i + 3,]
        data_train = pd.concat([data_train,data_transition])
    data_train.reset_index(inplace=True)
    # data_train.to_csv('aaa.csv')
    #输入标签处理
    for i in range(0,3,1):
        data_train[str(i) + 'min_train_open'] = data_train['open'].shift(i)
        data_train[str(i) + 'min_train_high'] = data_train['high'].shift(i)
        data_train[str(i) + 'min_train_low'] = data_train['low'].shift(i)
        data_train[str(i) + 'min_train_close'] = data_train['close'].shift(i)
    data_train = data_train[[x for x in data_train.columns if 'train' in x]].iloc[2:,]
    data_train.reset_index(inplace=True)
    data_train_x = data_train.iloc[0:1,]
    for i in range(3,len(data_train),3):
        data_transition = data_train.iloc[i:i + 1,]
        data_train_x = pd.concat([data_train_x,data_transition])
    #输出标签处理
    data_train_y = np.array(data_train_x['2min_train_close'])[1:]
    print(len(data_train_x),len(data_train_y))
    # data_train_x.to_csv('data_train_x.csv')
    # print(data_train_y)
    #数据分类
    data_train_X = data_train_x.iloc[:int(len(data_train_x)*0.7),]
    data_train_Y = data_train_y[:int(len(data_train_x)*0.7)]
    data_test_X = data_train_x.iloc[int(len(data_train_x)*0.7):-1,]
    data_test_Y = data_train_y[int(len(data_train_x)*0.7):]
    return data_train_X,data_train_Y,data_test_X,data_test_Y

#模型训练
def ModelTrain(data_train_X,data_train_Y,data_test_X):
    # 随机森林模型
    # params = [{'max_depth': [10],
    #            'n_estimators': [800, 900, 1000, 1100, 1200],
    #            'min_samples_split': [5]}]
    # model = ms.GridSearchCV(se.RandomForestRegressor(n_jobs=-1), params, cv=5)
    # model.fit(data_train_X, data_train_Y)
    # for param, score in zip(
    #         model.cv_results_['params'],
    #         model.cv_results_['mean_test_score']):
    #     print(param, score)
    # print(model.best_params_)
    # print(model.best_score_)
    # print(model.best_estimator_)
    # joblib.dump(model, '30Min_RandomForestRegressor_params.pkl')
    model = joblib.load('30Min_RandomForestRegressor_params.pkl')
    prediction = model.predict(data_test_X)
    return prediction

#结果分析
def ResultsHandle(prediction,data_test_X):
    data_results = pd.DataFrame()
    data_results['prediction'] = np.array(prediction)[:-1]
    data_results['10_30_close'] = np.array(data_test_X['0min_train_close'])[:-1]
    data_results['real_close'] = np.array(data_test_X['2min_train_close'])[1:]
    data_results['next_open'] = np.array(data_test_X['1min_train_open'])[1:]
    data_results['signals'] = np.where(data_results['prediction'] - data_results['10_30_close'] > 5,1,0)
    data_results['index_returns'] = data_results['real_close'].pct_change()
    data_results['cum_index_returns'] = (1 + data_results['index_returns']).cumprod()
    data_results['position_rate'] = data_results['next_open'] / data_results['10_30_close'] - 1
    data_results['position_returns'] = data_results['signals'] * data_results['position_rate']
    data_results['cum_position_returns'] = (1 + data_results['position_returns']).cumprod()
    return data_results

def Matplotlib(Data_results):
    plt.figure('RandomForest', facecolor='gray')
    plt.title('RandomForest', fontsize=20)
    plt.xlabel('Date', fontsize=14)
    plt.ylabel('Returns', fontsize=14)
    plt.tick_params(labelsize=10)
    ax = plt.gca()
    ax.xaxis.set_major_locator(md.YearLocator())
    ax.xaxis.set_minor_locator(md.MonthLocator())
    ax.xaxis.set_major_formatter(md.DateFormatter('%Y'))
    ax.xaxis_date()
    ax.autoscale_view()
    plt.grid(linestyle=':')
    dates = Data_results.index
    plt.plot(dates, Data_results['cum_index_returns'])
    plt.plot(dates, Data_results['cum_position_returns'])
    plt.legend()
    plt.show()


Data  = DataHandle(data)
Matplotlib(ResultsHandle(ModelTrain(Data[0],Data[1],Data[2]),Data[2]))



